
     +--------------------------+
            | CS 301
|
     | PROJECT 2: USER PROGRAMS |
     |    DESIGN DOCUMENT     |
     +--------------------------+
---- GROUP ----
>> Fill in the names and email addresses of your group members.
Abhishek Yalwalkar <abhishek.gy@iitgn.ac.in>
Ishan Prayagi <sunil.pi@iitgnac.in>
Meet Thumar <thumar.m@iitgn.ac.in>
---- PRELIMINARIES ----
>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
   ARGUMENT PASSING
   ================
---- DATA STRUCTURES ----
>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
-> We changed the declaration of setup_stack() to include executable file name 
and pointer to args as input. Otherthan that we have not declared any new 
'struct', 'struct' member, global or static variable, 'typedef' or enumeration
for argument passing.

---- ALGORITHMS ----
>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?
-> process_execute(): Through thread_creat(),Extracted executable file 
name will be called using strtok_r() and start_process().
-> start_process(): load() will called.
-> load(): Using strtok_r(), extracted executable file name and pointer 
to args passed to setup_stack().
-> setup_stack(): The name of the executable file was first placed to 
the stack, and then the arguments were added in ascending order from left to right.
By including extra zeros, we align it. The stack is then updated with NULL(argv[argc]).
The executable file name's address will now be at the bottom of the stack after we 
have added the addresses of the stack's arguments and the executable file name's 
address.The address of argv is then added to the stack after that.
Finally, the stack is expanded to include argc and return address. 

-> We havn't check the size of the stack, but if it overflows then
we exit the process through page_fault() exception by exit(-1).



---- RATIONALE ----
>> A3: Why does Pintos implement strtok_r() but not strtok()?
-> Pintos implement strtok_r() but not strtok(), due to main difference between 
them is that strtok_r() separates the command line and arguments while the address
of the arguments is stored in next_ptr which we give to the function.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.
-> Decreases the kernel process time(We didn't change).
-> Before Pre-processing passing to the kernel, it would be done in the shell.
-> The shell can check if there is an executable file before sending to the kernel 
instead of wasting time in the kernel.

     SYSTEM CALLS
     ============
---- DATA STRUCTURES ----
>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
-> Declaration of the thread control block was changed in thread.h as

struct thread
  {
    /* Owned by thread.c. */
    tid_t tid;                          /* Thread identifier. */
    enum thread_status status;          /* Thread state. */
    char name[16];                      /* Name (for debugging purposes). */
    uint8_t *stack;                     /* Saved stack pointer. */
    int priority;                       /* Priority. */
    struct list_elem allelem;           /* List element for all threads list. */

    /* Shared between thread.c and synch.c. */
    struct list_elem elem;              /* List element. */

    int64_t wake_time;                  /* Stores the waketime of the thread if it is in sleep */

    struct list fd_list;                /* File discriptors */
    int fd_length;                      /* Size of the fds*/
    struct file *f_execute;             /* Exec file that thread is running */

    struct semaphore sema_load;         /* Wait for child to load */
    struct semaphore sema_wait;         /* Wait for child to exit */
    struct list children_list;          /* Children list */
    struct thread *parent;       /* Parent thread */

#ifdef USERPROG
    /* Owned by userprog/process.c. */
    uint32_t *pagedir;                  /* Page directory. */
#endif

    /* Owned by thread.c. */
    unsigned magic;                     /* Detects stack overflow. */
  };
  
-> struct child was added in thread.h to handle wait

struct child 
  {
    struct list_elem child_elem;        /* list_elem for adding in list */
    struct thread *child_thread;        /* The thread representing the child */
    int child_tid;                      /* tid of the child */
    enum child_status exit_status;      /* Exit status of the child */
    enum child_status cur_status;   (We didnt change.)    /* Current status of the child */
    bool is_first_wait;                 /* Checks if wait is called multiple times */
    bool loaded;                        /* Checks if child is loaded */
  };

-> struct file_descriptor was added in thread.h to multi process file access

struct file_descriptor
  {
    struct list_elem fd_elem;
    int fd;
    struct file *fd_file;
  };
  
-> enum child_status was added in thread.h

/* States in a child's life cycle */
enum child_status
  {
    CHILD_KILLED,       /* Killed child */
    CHILD_EXITED,       /* Exited child */
    CHILD_ALIVE         /* Alive child */
  };
  
-> struct lock file_mutex was added in syscall.h for file synchronization.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?
-> To store the file_descriptor of open files, each process maintains a separate list of file descriptors. 
-> File descriptors are unique just within a single process not within the entire OS.


---- ALGORITHMS ----
>> B3: Describe your code for reading and writing user data from the
>> kernel.

-> First of all, check if the virtual address is valid, it is less than PHYS_BASE using
is_user_vaddr. 

-> Read():
Check if fd == 0 (STDIN), if it is then we use input_getc() to get input from console
else we use search_fd() to get the struct file_descriptor from fd. Then using file_read, file is read.

-> Write():
check if fd == 1 (STDOUT), if it is then we use putbuf() to output onto the console
else we use search_fd() to get the struct file_descriptor from fd. Then using file_write,
the file will be written.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?
-> We need one inspection of the page, if all of the data to be copied is in one page
table. otherwise two inspections are needed.

-> If both bytes are in the same page then only one inspection is needed else
two, for system call.

-> Improvemnet is not possible in this case.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.
-> The wait system call first calls process_wait() and in that we check
if the child has exited else we wait until it exits. Using a semaphore, we will wait.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

-> Whenever the address_check fails we call the exit system call which calls thread_exit
which then calls process_exit.

-> In process exit we free the children_list and change the allow access of the executable file of
the process and close all of the open files of this process.

-> In exception.c we are exiting the process in page_fault() if the address is invalid.

Example:
In bad-write2.c when (*(int*)0xC0000000 = 42); is called then as this is an invalid address it will
cause a page fault and exit(-1).


---- SYNCHRONIZATION ----
>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?
-> We added a boolean variable loaded to struct child that becomes true 
in start_process following the successful execution of the load function.
We access the loaded variable by searching the child through search child 
from the thread. 

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
-> When wait(C) is called, check if it has exited else wait for it to exit by using a 
semaphore. sema_down() is called to wait and when C exits sema_up() is called to wake up the parent
thread. Whenever process exits we free its children. 
-> If P terminates then its children list is freed and the child C executes as if it has no parent
regradless of whether C has exited or not.


---- RATIONALE ----
>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?
-> We thought that it was easier to do than second approach, so we validated the address in syscall.c.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
-> Advantages:
  - To manage file descriptors, we use Pintos list, which makes list editing simple. 
  - File descriptor lists allow the kernel to keep track of all open files. 

-> Disadvantages:
  - If several files are opened, it can eventually run out of memory because it uses the kernel memory as it expands. 
  - The entire file descriptor list is scanned by search fd, which executes in linear time. 


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
Annotations
-> We haven't change.

